apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

static def getBuildNumber() {
    return System.getenv("BUILD_NUMBER") as Integer ?: 0
}

android {
    compileSdkVersion Versions.androidCompileSdk

    defaultConfig {
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + getBuildNumber()
        minSdkVersion Versions.androidMinSdk
        targetSdkVersion Versions.androidTargetSdk
        testInstrumentationRunner "com.denwehrle.boilerplate.util.helper.TestRunner"
        multiDexEnabled = true
    }

    signingConfigs {
        release {
            storeFile file('keystore/release.keystore')
            keyAlias 'alias'
            storePassword "$System.env.STORE_PASSWORD"
            keyPassword "$System.env.APP_PASSWORD"
        }

        debug {
            storeFile file('keystore/debug.keystore')
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    dexOptions {
        preDexLibraries = false
        dexInProcess = false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    // change default directory path to use kotlin folders
    sourceSets {
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'

        def commonTestDir = 'src/commonTest/kotlin'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }
}

kapt {
    generateStubs = true
    correctErrorTypes = true
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:${Versions.kotlin}"
    }
}

dependencies {

    // App dependencies
    implementation AppDependencies.androidAnnotations
    implementation AppDependencies.androidSupportV13
    implementation AppDependencies.androidSupportV4
    implementation AppDependencies.appCompatV7
    implementation AppDependencies.constraintLayout
    implementation AppDependencies.dagger
    implementation AppDependencies.daggerSupport
    implementation AppDependencies.glide
    implementation AppDependencies.gson
    implementation AppDependencies.javaxAnnotation
    implementation AppDependencies.javaxInject
    implementation AppDependencies.kotlin
    implementation AppDependencies.okHttp
    implementation AppDependencies.okHttpLogger
    implementation AppDependencies.retrofit
    implementation AppDependencies.retrofitAdapter
    implementation AppDependencies.retrofitConverter
    implementation AppDependencies.roomRuntime
    implementation AppDependencies.roomRxJava
    implementation AppDependencies.rxAndroid
    implementation AppDependencies.rxKotlin
    implementation AppDependencies.stetho
    implementation AppDependencies.supportDesign
    implementation AppDependencies.supportRecyclerView
    implementation AppDependencies.timber
    implementation AppDependencies.pageindicatorview

    debugImplementation AppDependencies.leakCanaryDebug
    releaseImplementation AppDependencies.leakCanaryRelease

    kapt AppDependencies.roomCompiler
    kapt AppDependencies.daggerCompiler
    kapt AppDependencies.daggerProcessor

    compileOnly AppDependencies.glassfishAnnotation

    // Instrumentation test dependencies
    androidTestImplementation TestDependencies.dexopener
    androidTestImplementation TestDependencies.junit
    androidTestImplementation TestDependencies.mockitoKotlin
    androidTestImplementation TestDependencies.dexmakerMockito
    androidTestImplementation(TestDependencies.espressoCore) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(TestDependencies.androidRunner) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(TestDependencies.androidRules) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(TestDependencies.espressoIntents) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(TestDependencies.espressoContrib) {
        exclude module: 'appcompat'
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    }
    kaptAndroidTest AppDependencies.daggerCompiler

    // Unit test dependencies
    testImplementation TestDependencies.junit
    testImplementation TestDependencies.kotlinJUnit
    testImplementation TestDependencies.mockitoKotlin
    testImplementation TestDependencies.assertj
    testImplementation TestDependencies.robolectric
    testImplementation TestDependencies.roomTesting

    kaptTest AppDependencies.daggerCompiler
}
